//FINAL VERSION_ORIGINAL CODE
//PATRICIA MONICA GEORGE
#include <Servo.h>
#define trigPin_l 7
#define echoPin_l 6
#define trigPin_r 4
#define echoPin_r 3
#define distance_threshold 110
#define distance_threshold_2 55
#define FORWARD 101
#define REVERSE 77
#define NEUTRAL 90
#define LEFT 0
#define RIGHT 160
#define STRAIGHT 77
Servo esc;
Servo myservo;
long duration_l, distance_l, duration_r, distance_r;
long previous_distance_l, previous_distance_r;
long throttle=FORWARD, steering=STRAIGHT;

void setup()
{
  esc.attach(9);
  myservo.attach(8);
  Serial.begin(9600);
  randomSeed(analogRead(0));
  pinMode(trigPin_l, OUTPUT);
  pinMode(echoPin_l, INPUT);
  pinMode(trigPin_r, OUTPUT);
  pinMode(echoPin_r, INPUT);
  esc.write(180);
  delay(1000);
  myservo.write(180);
  delay(1000);
  esc.write(0);
  delay(1000);
  myservo.write(0);
  delay(1000);
  esc.write(90);
  delay(1000);
  myservo.write(90);
  delay(1000);
  Serial.println("STRAIGHT AND NEUTRAL");
}

void Sensor_l()
{

  //HARDWARE
  digitalWrite(echoPin_l,LOW);
   digitalWrite(trigPin_l, LOW);
    delayMicroseconds(2);
    digitalWrite(trigPin_l, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin_l, LOW);
    duration_l = pulseIn(echoPin_l, HIGH,25000);
    distance_l = (duration_l/2) / 29.1;

  //SOFTWARE
  //distance_l = random(200);
//  Serial.println("LEFT : ");
//  Serial.print(distance_l);
//  Serial.println(" cm");
}
void Sensor_r()
{
  
  //HARDWARE
  digitalWrite(echoPin_r,LOW);
    digitalWrite(trigPin_r, HIGH);
    delayMicroseconds(2);
    digitalWrite(trigPin_r, LOW);
    delayMicroseconds(10);
    digitalWrite(trigPin_r, HIGH);
    duration_r = pulseIn(echoPin_r, HIGH,25000);
    distance_r = (duration_r/2) / 29.1;

  //SOFTWARE
//  distance_r = random(200);
//  Serial.println("RIGHT : ");
//  Serial.print(distance_r);
//  Serial.println(" cm");

}

void Reverse()
{
      //HARDWARE
      
       myservo.write(STRAIGHT);
        esc.write(REVERSE);
       delay(400);
       throttle=REVERSE;
       steering=STRAIGHT;
       Sensor_r();
       Sensor_l();
      //SOFTWARE
      Serial.println("STRAIGHT AND REVERSE");
}

void Neutral()
{
      //HARDWARE
       
       myservo.write(STRAIGHT);
       esc.write(NEUTRAL);
       throttle=NEUTRAL;
       steering=STRAIGHT;

      //SOFTWARE
      Serial.println("STRAIGHT AND NEUTRAL");
}

void loop()
{
  delay(500);  
  Neutral();
  
  Sensor_l();
  Sensor_r();

  if(distance_l>=1000 || distance_l==0) 
  {
    
    distance_l=1000;
    //Serial.println("LL");
  }
  if(distance_r==0 || distance_r>=1000) 
  {
    distance_r=1000;
    //Serial.println("RR");
  }
  
  Serial.println("LEFT : ");
  Serial.print(distance_l);
  Serial.println(" cm");
  Serial.println("RIGHT : ");
  Serial.print(distance_r);
  Serial.println(" cm");

    
  if (distance_l <= distance_threshold && distance_r <= distance_threshold+20)
  {
    if(distance_l>distance_r)
    {
      //HARDWARE
      Reverse();
//      myservo.write(RIGHT);
//      esc.write(REVERSE);
//      delay(300);
//      throttle=REVERSE;
//      steering=RIGHT;        
//         
//      //SOFTWARE
//      Serial.println("RIGHT AND REVERSE"); 
      
      Neutral();

       //HARDWARE
    
    myservo.write(STRAIGHT);
    esc.write(FORWARD);
    throttle=FORWARD;
    steering=STRAIGHT;

    //SOFTWARE
    Serial.println("STRAIGHT AND FORWARD");

      
   
    }
    else if(distance_l<distance_r)
    {
      //HARDWARE
      Reverse();
//    //  myservo.write(LEFT);
//      esc.write(REVERSE);
//      delay(800);
//      
//      throttle=REVERSE;
//      steering=LEFT;
//     
//      //SOFTWARE
//      Serial.println("LEFT AND REVERSE");

       Neutral();

        //HARDWARE
    
    myservo.write(STRAIGHT);
    esc.write(FORWARD);
    throttle=FORWARD;
    steering=STRAIGHT;

    //SOFTWARE
    Serial.println("STRAIGHT AND FORWARD");


       
      
    }
    else 
    {
      //HARDWARE
      
     Reverse();
      
       Neutral();

        //HARDWARE
   
    myservo.write(STRAIGHT);
     esc.write(FORWARD);
    throttle=FORWARD;
    steering=STRAIGHT;

    //SOFTWARE
    Serial.println("STRAIGHT AND FORWARD");


       

    }           
  }
  else if (distance_l <= distance_threshold)
  {
    if(distance_l<=distance_threshold_2)
    {
    Reverse();
    Neutral();
    //HARDWARE
    
    myservo.write(RIGHT);
    esc.write(FORWARD);
    throttle=FORWARD;
    steering=RIGHT;

    //SOFTWARE
    Serial.println("RIGHT AND FORWARD");
    }
    else
    {
      //HARDWARE
    
    myservo.write(RIGHT);
    esc.write(FORWARD);
    throttle=FORWARD;
    steering=RIGHT;

    //SOFTWARE
    Serial.println("RIGHT AND FORWARD");
    }
  }
  else if (distance_r <= distance_threshold+20)
  {
    if(distance_r<=distance_threshold_2+30)
    {
    Reverse();
    Neutral();
    //HARDWARE
    
    myservo.write(LEFT);
    esc.write(FORWARD);
    throttle=FORWARD;
    steering=LEFT;

    //SOFTWARE
    Serial.println("LEFT AND FORWARD");
    }
    else
    {
       //HARDWARE
   
    myservo.write(LEFT);
     esc.write(FORWARD);
    throttle=FORWARD;
    steering=LEFT;

    //SOFTWARE
    Serial.println("LEFT AND FORWARD");
    }
  }
  else
  {
    //HARDWARE
    
    myservo.write(STRAIGHT);
    esc.write(FORWARD);

    throttle=FORWARD;
    steering=STRAIGHT;

    //SOFTWARE
    Serial.println("STRAIGHT AND FORWARD");

  }

}
